{"ast":null,"code":"var _jsxFileName = \"/Users/jserrano/Desktop/Chat/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport UserContext from './hooks/userContext';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = 'http://localhost:5000';\nconst socket = socketIOClient(ENDPOINT);\n\nconst App = () => {\n  _s();\n\n  const [connected, setConnected] = useState(false);\n  const [userData, setUserData] = useState({\n    room: \"sala-1\",\n    name: \"\"\n  });\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    socket.on(\"bot_message\", data => {\n      console.log(data);\n      setMessages([...messages, data]);\n    });\n    socket.on(\"message\", data => {\n      console.log(data);\n      setMessages([...messages, data]);\n    }); // CLEAN UP THE EFFECT\n\n    return () => socket.disconnect();\n  }, []);\n\n  const emmitMessage = () => {\n    socket.emit(\"sendMessage\", {\n      message,\n      name: userData.name,\n      room: userData.room\n    });\n    setMessage(\"\");\n  };\n\n  const changeMessage = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setMessage(value);\n  };\n\n  const changeName = e => {\n    const {\n      target: {\n        value = \"\"\n      }\n    } = e;\n    setUserData({ ...userData,\n      name: value\n    });\n  };\n\n  const connect = () => {\n    socket.emit('join', { ...userData\n    });\n    setConnected(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: userData,\n    children: [\"\\u2211\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: !connected ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: userData === null || userData === void 0 ? void 0 : userData.name,\n          onChange: changeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connect,\n          children: \"Conectar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: changeMessage,\n          value: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: emmitMessage,\n          children: \"Emitir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"6LvpVIMmeP7Yj1S1+FatIhD2LTs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jserrano/Desktop/Chat/client/src/App.tsx"],"names":["useEffect","useState","socketIOClient","UserContext","ENDPOINT","socket","App","connected","setConnected","userData","setUserData","room","name","message","setMessage","messages","setMessages","on","data","console","log","disconnect","emmitMessage","emit","changeMessage","e","target","value","changeName","connect"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport UserContext from './hooks/userContext';\nimport IUserData from './classes/IUserData';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\n\nconst ENDPOINT = 'http://localhost:5000';\nconst socket = socketIOClient(ENDPOINT);\n\nconst App: React.FC = () => {\n  const [connected, setConnected] = useState<boolean>(false);\n  const [userData, setUserData] = useState<IUserData>({\n    room: \"sala-1\",\n    name: \"\"\n  });\n  const [message, setMessage] = useState<string>(\"\");\n  const [messages, setMessages] = useState<Array<any>>([]);\n\n  useEffect((): any => {\n    socket.on(\"bot_message\", data => {\n      console.log(data);\n      setMessages([...messages, data]);\n    });\n    socket.on(\"message\", data => {\n      console.log(data);\n      setMessages([...messages, data]);\n    });\n\n    // CLEAN UP THE EFFECT\n    return () => socket.disconnect();\n  }, []);\n\n  const emmitMessage = () => {\n    socket.emit(\"sendMessage\", {\n      message,\n      name: userData.name,\n      room: userData.room\n    });\n    setMessage(\"\");\n  }\n\n  const changeMessage = (e: any) => {\n    const { target: { value } } = e;\n    setMessage(value);\n  }\n\n  const changeName = (e: any) => {\n    const { target: { value = \"\" } } = e;\n\n    setUserData({\n      ...userData,\n      name: value\n    });\n  }\n\n  const connect = () => {\n    socket.emit('join', {\n      ...userData\n    });\n    setConnected(true)\n  }\n\n  return (\n    <UserContext.Provider value={userData}>\n      \n    âˆ‘\n    <div className=\"App\">\n      {\n        !connected ?\n        <>\n          <input value={userData?.name} onChange={changeName} />\n          <button onClick={connect}>Conectar</button>\n        </>\n        : \n        <>\n          <input onChange={changeMessage} value={message} />\n          <button onClick={emmitMessage}>Emitir</button>\n        </>\n      }\n\n    </div>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}