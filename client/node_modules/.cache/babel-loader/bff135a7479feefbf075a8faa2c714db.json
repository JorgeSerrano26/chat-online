{"ast":null,"code":"var _jsxFileName = \"/Users/jserrano/Desktop/Chat/client/src/pages/ChatView/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport userContext from '../../hooks/userContext';\nimport './styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT || \"http://localhost:5000\";\nlet socket;\n\nconst ChatView = () => {\n  _s();\n\n  const refChatBox = useRef();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const {\n    userData\n  } = useContext(userContext);\n  const [message, setMessage] = useState(\"\");\n\n  const emmitMessage = e => {\n    e.preventDefault();\n    socket.emit(\"sendMessage\", message, error => {\n      if (error) alert(error);\n    });\n    setMessage(\"\");\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit('join', userData, error => {\n      if (error) {\n        alert(error);\n        return;\n      }\n    });\n    return () => socket.disconnect();\n  }, []);\n  useEffect(() => {\n    socket.on(\"bot_message\", data => {\n      setMessages(messages => [...messages, data]);\n    });\n    socket.on(\"message\", data => {\n      setMessages(messages => [...messages, data]);\n    });\n    socket.on('roomData', data => {\n      setUsers(data.users);\n    });\n  }, []);\n\n  const isMyMessage = name => {\n    switch (name) {\n      case \"admin\":\n        return \"adminMessage\";\n\n      default:\n        return name.toLowerCase() === userData.name.toLowerCase() ? \"myMessage\" : \"\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"sidebar-title\",\n        children: userData.room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"sidebar__listusers\",\n        children: users.map((user, i) => {\n          console.log(user);\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"listusers__item\",\n            children: user.name\n          }, `${user}-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__right\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"chat__chatbox\",\n        ref: refChatBox,\n        children: messages.map(m => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `message ${isMyMessage(m.user)}`,\n          children: [m.user != \"admin\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: m.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: m.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 48\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__send-box\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: emmitMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: message.length === 0,\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ChatView, \"BU0k+zOMjnCHNDqffg0UH8KknY4=\");\n\n_c = ChatView;\nexport default ChatView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatView\");","map":{"version":3,"sources":["/Users/jserrano/Desktop/Chat/client/src/pages/ChatView/index.tsx"],"names":["useContext","useEffect","useRef","useState","io","userContext","ENDPOINT","process","env","REACT_APP_ENDPOINT","socket","ChatView","refChatBox","messages","setMessages","users","setUsers","userData","message","setMessage","emmitMessage","e","preventDefault","emit","error","alert","disconnect","on","data","isMyMessage","name","toLowerCase","room","map","user","i","console","log","m","text","target","value","length"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport IMessage from '../../classes/IMessage';\nimport userContext from '../../hooks/userContext';\nimport './styles.scss';\n\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT || \"http://localhost:5000\";\nlet socket: any;\n\nconst ChatView: React.FC = () => {\n    const refChatBox = useRef<any>();\n    const [messages, setMessages] = useState<Array<IMessage>>([]);\n    const [users, setUsers] = useState<Array<any>>([]);\n    const { userData } = useContext(userContext);\n    const [message, setMessage] = useState<string>(\"\");\n\n    const emmitMessage = (e: any) => {\n        e.preventDefault();\n        socket.emit(\"sendMessage\", message, (error: any) => {\n            if (error) alert(error);\n        });\n        setMessage(\"\");\n    }\n    useEffect((): any => {\n        socket = io(ENDPOINT);\n\n        socket.emit('join', userData, (error: any) => {\n            if (error) {\n                alert(error);\n                return;\n            }\n        });\n\n        return () => socket.disconnect();\n    }, []);\n\n    useEffect((): any => {\n        socket.on(\"bot_message\", (data: IMessage) => {\n            setMessages(messages => [...messages, data]);\n        });\n\n        socket.on(\"message\", (data: IMessage) => {\n            setMessages(messages => [...messages, data]);\n        });\n\n        socket.on('roomData', (data: any) => {\n            setUsers(data.users)\n        })\n    }, []);\n    const isMyMessage = (name: string) => {\n        switch (name) {\n            case \"admin\":\n                return \"adminMessage\";\n            default:\n                return name.toLowerCase() === userData.name.toLowerCase() ? \"myMessage\" : \"\";\n        }\n    }\n    \n    return <div className=\"chat\">\n        <div className=\"chat__sidebar\">\n            <h1 className=\"sidebar-title\">{userData.room}</h1>\n            <ul className=\"sidebar__listusers\">\n                {users.map((user,i) => {\n                    console.log(user)\n                    return <li className=\"listusers__item\" key={`${user}-${i}`}>{user.name}</li>\n                })}\n            </ul>\n        </div>\n        <div className=\"chat__right\">\n            <ul className=\"chat__chatbox\" ref={refChatBox}>          \n                {messages.map((m: IMessage) => <li className={`message ${isMyMessage(m.user)}`}>\n                    {m.user != \"admin\" && <div>{m.user}</div>}\n                    <div>{m.text}</div>\n                </li>)}\n            </ul>\n            <div className=\"chat__send-box\">\n                <form onSubmit={emmitMessage}>\n                    <input value={message} onChange={(e: any) => setMessage(e.target.value)} />\n                    <button type=\"submit\" disabled={message.length === 0}>Enviar</button>\n                </form>\n            </div>\n        </div>\n\n    </div>\n}\n\nexport default ChatView;"]},"metadata":{},"sourceType":"module"}