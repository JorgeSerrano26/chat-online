{"ast":null,"code":"var _jsxFileName = \"/Users/jserrano/Desktop/Chat/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = 'http://localhost:5000';\nconst socket = socketIOClient(ENDPOINT);\n\nconst App = () => {\n  _s();\n\n  const [connected, setConnected] = useState(false);\n  const [userData, setUserData] = useState({\n    room: \"sala-1\",\n    name: \"\"\n  });\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    socket.on(\"emmit:message\", data => {\n      console.log(data);\n      setMessages([...messages, data]);\n    }); // CLEAN UP THE EFFECT\n\n    return () => socket.disconnect();\n  }, []);\n\n  const emmitMessage = () => {\n    socket.emit(\"send:message\", {\n      message,\n      author: \"jorge\"\n    });\n    setMessage(\"\");\n  };\n\n  const changeMessage = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setMessage(value);\n  };\n\n  const changeName = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setUserData({ ...userData,\n      name: value\n    });\n  };\n\n  const connect = () => {\n    socket.emit('join', { ...userData\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !connected ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: userData === null || userData === void 0 ? void 0 : userData.name,\n        onChange: changeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connect,\n        children: \"Conectar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: changeMessage,\n        value: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: emmitMessage,\n        children: \"Emitir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"6LvpVIMmeP7Yj1S1+FatIhD2LTs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jserrano/Desktop/Chat/client/src/App.tsx"],"names":["useEffect","useState","socketIOClient","ENDPOINT","socket","App","connected","setConnected","userData","setUserData","room","name","message","setMessage","messages","setMessages","on","data","console","log","disconnect","emmitMessage","emit","author","changeMessage","e","target","value","changeName","connect"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,WAAP;;;AAEA,MAAMC,QAAQ,GAAG,uBAAjB;AACA,MAAMC,MAAM,GAAGF,cAAc,CAACC,QAAD,CAA7B;;AAOA,MAAME,GAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAmB;AACzDS,IAAAA,IAAI,EAAE,QADmD;AAEzDC,IAAAA,IAAI,EAAE;AAFmD,GAAnB,CAAxC;AAIA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAa,EAAb,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAW;AACnBI,IAAAA,MAAM,CAACY,EAAP,CAAU,eAAV,EAA2BC,IAAI,IAAI;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAF,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcG,IAAd,CAAD,CAAX;AACD,KAHD,EADmB,CAMnB;;AACA,WAAO,MAAMb,MAAM,CAACgB,UAAP,EAAb;AACD,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMC,YAAY,GAAG,MAAM;AACzBjB,IAAAA,MAAM,CAACkB,IAAP,CAAY,cAAZ,EAA4B;AAC1BV,MAAAA,OAD0B;AAE1BW,MAAAA,MAAM,EAAE;AAFkB,KAA5B;AAKAV,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAPD;;AASA,QAAMW,aAAa,GAAIC,CAAD,IAAY;AAChC,UAAM;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV,QAAwBF,CAA9B;AACAZ,IAAAA,UAAU,CAACc,KAAD,CAAV;AACD,GAHD;;AAKA,QAAMC,UAAU,GAAIH,CAAD,IAAY;AAC7B,UAAM;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV,QAAwBF,CAA9B;AACAhB,IAAAA,WAAW,CAAC,EACR,GAAGD,QADK;AAERG,MAAAA,IAAI,EAAEgB;AAFE,KAAD,CAAX;AAID,GAND;;AAQA,QAAME,OAAO,GAAG,MAAM;AACpBzB,IAAAA,MAAM,CAACkB,IAAP,CAAY,MAAZ,EAAoB,EAClB,GAAGd;AADe,KAApB;AAGD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cAEI,CAACF,SAAD,gBACA;AAAA,8BACE;AAAO,QAAA,KAAK,EAAEE,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEG,IAAxB;AAA8B,QAAA,QAAQ,EAAEiB;AAAxC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBADA,gBAMA;AAAA,8BACE;AAAO,QAAA,QAAQ,EAAEL,aAAjB;AAAgC,QAAA,KAAK,EAAEZ;AAAvC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAES,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAhED;;GAAMhB,G;;KAAAA,G;AAkEN,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport './App.css';\n\nconst ENDPOINT = 'http://localhost:5000';\nconst socket = socketIOClient(ENDPOINT);\n\ninterface IUserData {\n  name: string,\n  room: string\n}\n\nconst App: React.FC = () => {\n  const [connected, setConnected] = useState<boolean>(false);\n  const [userData, setUserData] = useState<IUserData | null>({\n    room: \"sala-1\",\n    name: \"\"\n  });\n  const [message, setMessage] = useState<string>(\"\");\n  const [messages, setMessages] = useState<Array<any>>([]);\n\n  useEffect((): any => {\n    socket.on(\"emmit:message\", data => {\n      console.log(data);\n      setMessages([...messages, data]);\n    });\n\n    // CLEAN UP THE EFFECT\n    return () => socket.disconnect();\n  }, []);\n\n  const emmitMessage = () => {\n    socket.emit(\"send:message\", {\n      message,\n      author: \"jorge\",\n\n    });\n    setMessage(\"\");\n  }\n\n  const changeMessage = (e: any) => {\n    const { target: { value } } = e;\n    setMessage(value);\n  }\n\n  const changeName = (e: any) => {\n    const { target: { value } } = e;\n    setUserData({\n        ...userData,\n        name: value\n    });\n  }\n\n  const connect = () => {\n    socket.emit('join', {\n      ...userData\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        !connected ?\n        <>\n          <input value={userData?.name} onChange={changeName} />\n          <button onClick={connect}>Conectar</button>\n        </>\n        : \n        <>\n          <input onChange={changeMessage} value={message} />\n          <button onClick={emmitMessage}>Emitir</button>\n        </>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}